
        //static void backup()
        //{
        //    string s1 = "Persist Security Info=False;Integrated Security=true; Initial Catalog = AdventureWorks; Server = MSSQL1";
        //    string s2 = "Persist Security Info=False;Integrated Security=SSPI; database = AdventureWorks; server = (local)";
        //    string s3 = "Persist Security Info=False;Trusted_Connection=True; database = AdventureWorks; server = (local)";
        //    AsynchronousClient.StartClient();
        //    int i = 0;
        //    while (true)
        //    {
        //        Thread t = new Thread(new ThreadStart(innerThread));
        //        t.Start();
        //        Thread.Sleep(1000);
        //        Console.WriteLine(i++);
        //    }

        //    (...) use the connection at your will.
        //    Even after the impersonation context ended, the connection remains usable.
        //}

        //static void innerThread()
        //{
        //    SynchronousSocketClient.StartClient();
        //}

        //public class StateObject
        //{
        //    // Client socket.  
        //    public Socket workSocket = null;
        //    // Size of receive buffer.  
        //    public const int BufferSize = 256;
        //    // Receive buffer.  
        //    public byte[] buffer = new byte[BufferSize];
        //    // Received data string.  
        //    public StringBuilder sb = new StringBuilder();
        //}

        //public class AsynchronousClient
        //{
        //    // The port number for the remote device.  
        //    private const int port = 11000;

        //    // ManualResetEvent instances signal completion.  
        //    private static ManualResetEvent connectDone =
        //        new ManualResetEvent(false);
        //    private static ManualResetEvent sendDone =
        //        new ManualResetEvent(false);
        //    private static ManualResetEvent receiveDone =
        //        new ManualResetEvent(false);

        //    // The response from the remote device.  
        //    private static String response = String.Empty;

        //    public static void StartClient()
        //    {
        //        // Connect to a remote device.  
        //        try
        //        {
        //            while (true)
        //            {
        //                // Establish the remote endpoint for the socket.  
        //                // The name of the
        //                // remote device is "host.contoso.com".  
        //                IPHostEntry ipHostInfo = Dns.GetHostEntry("127.0.0.1");
        //                IPAddress ipAddress = ipHostInfo.AddressList[0];
        //                IPEndPoint remoteEP = new IPEndPoint(ipAddress, port);

        //                // Create a TCP/IP socket.  
        //                Socket client = new Socket(ipAddress.AddressFamily,
        //                    SocketType.Stream, ProtocolType.Tcp);

        //                // Connect to the remote endpoint.  
        //                client.BeginConnect(remoteEP,
        //                    new AsyncCallback(ConnectCallback), client);
        //                connectDone.WaitOne();

        //                // Send test data to the remote device.  
        //                Send(client, "This is a test<EOF>");
        //                sendDone.WaitOne();

        //                // Receive the response from the remote device.  
        //                Receive(client);
        //                receiveDone.WaitOne();

        //                // Write the response to the console.  
        //                Console.WriteLine("Response received : {0}", response);

        //                // Release the socket.  
        //                client.Shutdown(SocketShutdown.Both);
        //                client.Close();
        //            }
        //        }
        //        catch (Exception e)
        //        {
        //            Console.WriteLine(e.ToString());
        //        }
        //    }

        //    private static void ConnectCallback(IAsyncResult ar)
        //    {
        //        try
        //        {
        //            // Retrieve the socket from the state object.  
        //            Socket client = (Socket)ar.AsyncState;

        //            // Complete the connection.  
        //            client.EndConnect(ar);

        //            Console.WriteLine("Socket connected to {0}",
        //                client.RemoteEndPoint.ToString());

        //            // Signal that the connection has been made.  
        //            connectDone.Set();
        //        }
        //        catch (Exception e)
        //        {
        //            Console.WriteLine(e.ToString());
        //        }
        //    }

        //    private static void Receive(Socket client)
        //    {
        //        try
        //        {
        //            // Create the state object.  
        //            StateObject state = new StateObject();
        //            state.workSocket = client;

        //            // Begin receiving the data from the remote device.  
        //            client.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0,
        //                new AsyncCallback(ReceiveCallback), state);
        //        }
        //        catch (Exception e)
        //        {
        //            Console.WriteLine(e.ToString());
        //        }
        //    }

        //    private static void ReceiveCallback(IAsyncResult ar)
        //    {
        //        try
        //        {
        //            // Retrieve the state object and the client socket
        //            // from the asynchronous state object.  
        //            StateObject state = (StateObject)ar.AsyncState;
        //            Socket client = state.workSocket;

        //            // Read data from the remote device.  
        //            int bytesRead = client.EndReceive(ar);

        //            if (bytesRead > 0)
        //            {
        //                // There might be more data, so store the data received so far.  
        //                state.sb.Append(Encoding.ASCII.GetString(state.buffer, 0, bytesRead));

        //                // Get the rest of the data.  
        //                client.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0,
        //                    new AsyncCallback(ReceiveCallback), state);
        //            }
        //            else
        //            {
        //                // All the data has arrived; put it in response.  
        //                if (state.sb.Length > 1)
        //                {
        //                    response = state.sb.ToString();
        //                }
        //                // Signal that all bytes have been received.  
        //                receiveDone.Set();
        //            }
        //        }
        //        catch (Exception e)
        //        {
        //            Console.WriteLine(e.ToString());
        //        }
        //    }

        //    private static void Send(Socket client, String data)
        //    {
        //        // Convert the string data to byte data using ASCII encoding.  
        //        byte[] byteData = Encoding.ASCII.GetBytes(data);

        //        // Begin sending the data to the remote device.  
        //        client.BeginSend(byteData, 0, byteData.Length, 0,
        //            new AsyncCallback(SendCallback), client);
        //    }

        //    private static void SendCallback(IAsyncResult ar)
        //    {
        //        try
        //        {
        //            // Retrieve the socket from the state object.  
        //            Socket client = (Socket)ar.AsyncState;

        //            // Complete sending the data to the remote device.  
        //            int bytesSent = client.EndSend(ar);
        //            Console.WriteLine("Sent {0} bytes to server.", bytesSent);

        //            // Signal that all bytes have been sent.  
        //            sendDone.Set();
        //        }
        //        catch (Exception e)
        //        {
        //            Console.WriteLine(e.ToString());
        //        }
        //    }
        //}

        //public class SynchronousSocketClient
        //{

        //    public static void StartClient()
        //    {
        //        // Data buffer for incoming data.  
        //        byte[] bytes = new byte[1024];

        //        // Connect to a remote device.  
        //        try
        //        {
        //            // Establish the remote endpoint for the socket.  
        //            // This example uses port 11000 on the local computer.  
        //            IPHostEntry ipHostInfo = Dns.GetHostEntry(Dns.GetHostName());
        //            IPAddress ipAddress = ipHostInfo.AddressList[0];
        //            IPEndPoint remoteEP = new IPEndPoint(ipAddress, 11000);

        //            // Create a TCP/IP  socket.  
        //            Socket sender = new Socket(ipAddress.AddressFamily,
        //                SocketType.Stream, ProtocolType.Tcp);

        //            // Connect the socket to the remote endpoint. Catch any errors.  
        //            try
        //            {
        //                sender.Connect(remoteEP);

        //                Console.WriteLine("Socket connected to {0}",
        //                    sender.RemoteEndPoint.ToString());

        //                // Encode the data string into a byte array.  
        //                byte[] msg = Encoding.ASCII.GetBytes("This is a test<EOF>");

        //                // Send the data through the socket.  
        //                int bytesSent = sender.Send(msg);

        //                // Receive the response from the remote device.  
        //                int bytesRec = sender.Receive(bytes);
        //                Console.WriteLine("Echoed test = {0}",
        //                    Encoding.ASCII.GetString(bytes, 0, bytesRec));

        //                // Release the socket.  
        //                sender.Shutdown(SocketShutdown.Both);
        //                sender.Close();

        //            }
        //            catch (ArgumentNullException ane)
        //            {
        //                Console.WriteLine("ArgumentNullException : {0}", ane.ToString());
        //            }
        //            catch (SocketException se)
        //            {
        //                Console.WriteLine("SocketException : {0}", se.ToString());
        //            }
        //            catch (Exception e)
        //            {
        //                Console.WriteLine("Unexpected exception : {0}", e.ToString());
        //            }

        //        }
        //        catch (Exception e)
        //        {
        //            Console.WriteLine(e.ToString());
        //        }
        //    }
        //}


                    //while (true)
            //{
            //    DirectoryInfo di = new DirectoryInfo(@"C:\Users\JeffreyShin\Documents\Bucket\220712");

            //    foreach (FileInfo fi in di.GetFiles())
            //    {
            //        if (fi.Name == "preset.txt")
            //        {
            //            Console.WriteLine(fi.Name + "\n");

            //            Console.WriteLine(fi.CreationTime);
            //            Console.WriteLine(fi.LastAccessTime);
            //            Console.WriteLine(fi.LastWriteTime);

            //            Console.WriteLine("------------------\n\n\n");
            //        }
            //    }
            //    Console.ReadLine();
            //}

            //DateTime dt = Convert.ToDateTime("2022-05-12 00:00:00");
            //Console.WriteLine(dt.ToString("yyyyMMdd hh:mm:ss"));

            //string dir = @"C:\Users\JeffreyShin\Documents\Bucket\220712\";
            ////DirectoryInfo di = new DirectoryInfo(dir);
            ////Console.WriteLine(di.CreationTime);
            ////Console.WriteLine(di.LastAccessTime);

            ////ZipFile.CreateFromDirectory(dir + "forzip1", dir + "test.zip");

            //ZipArchive zipArchive = ZipFile.OpenRead(dir + "test.zip");
            //foreach (ZipArchiveEntry zae in zipArchive.Entries)
            //{
            //    Console.WriteLine(zae.FullName);
            //}
            ////Folder - Creation time / Name Like
            ////File - Creation Time / Name Like

            //DateTime dt = DateTime.Parse("2022-05-12");
            //DateTime dt = DateTime.Parse("2022-05-12 14:00:00/2022-05-16 12:00:00");
            //Console.WriteLine(dt.ToString());

            var connection = new OleDbConnection(@"Provider=Search.CollatorDSO;Extended Properties=""Application=Windows""");

            // File name search (case insensitive), also searches sub directories
            var query1 = @"SELECT System.ItemName FROM SystemIndex " +
                        @"WHERE scope ='file:C:/' AND System.ItemName LIKE '%Test%'";

            // File name search (case insensitive), does not search sub directories
            var query2 = @"SELECT System.ItemName FROM SystemIndex " +
                        @"WHERE directory = 'file:C:/' AND System.ItemName LIKE '%Test%' ";

            // Folder name search (case insensitive)
            var query3 = @"SELECT System.ItemName FROM SystemIndex " +
                        @"WHERE scope = 'file:C:/' AND System.ItemType = 'Directory' AND System.Itemname LIKE '%Test%' ";

            // Folder name search (case insensitive), does not search sub directories
            var query4 = @"SELECT System.ItemName FROM SystemIndex " +
                        //@"WHERE directory = 'file:C:/' AND System.ItemType = 'Directory' AND System.Itemname LIKE '%Test%' ";
                        @"WHERE directory = 'file:C:\Users\JeffreyShin\Documents\' AND System.ItemType = 'Directory'";

            connection.Open();

            var command = new OleDbCommand(query4, connection);

            using (var r = command.ExecuteReader())
            {
                while (r.Read())
                {
                    Console.WriteLine(r[0]);
                }
            }

            connection.Close();

            Console.ReadKey();
			
			using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using HelperDotNet;
using Microsoft.Office.Interop.Excel;

namespace Tester
{
    class Program
    {
        static void Main(string[] args)
        {
            //Console.WriteLine(File.ReadAllText(@"\\172.22.13.33\DTS\ExceedToDTS\hnm05-kr\WMSOSTS\Archive\WMSSHP_I216_LF03_00547746_000_20220524001332263.txt"));

            //If Left(Value, 1) = "1" or Left(Value, 1) = "2" or Left(Value, 1) = "3" 
            //    or Left(Value, 1) = "4" Then Value = "★" Else Value = "♥" End If

            //string name = "이 민";
            ////string name = "신 승원";

            //string Value = "";

            //if(Value.Length == 2)
            //{
            //    Value = name.Substring(0, Value.Length - 1) + "*";
            //}
            //else if (Value.Length >= 3)
            //{
            //    Value = name.Substring(0, Value.Length - 1) + "*";
            //}
            //else
            //{
            //    Value = name;
            //}


            //If Len(Value) = 2 Then Value = Left(Value, Len(Value) - 1) + "*"
            //Else If Len(Value) >= 3 Then Left(Value, Len(Value - 2) + "*" + Right(Value, 1)
            //End If


            //AsynchronousSocketListener.StartListening();            

            ////Connect DB
            //string connectionString = "Data Source=" + "172.22.8.143" + ",1433; Initial Catalog=" + "KRWMS"
            //    + "; User id=" + "superuser" + "; Password=" + "superuser" + ";";

            //DbHelper dh = new DbHelper(connectionString);
            //Logger l = new Logger(Directory.GetCurrentDirectory() + @"\Logger");
            //dh.SetLogger(l);

            //Connect DB
            string connectionString = "Data Source=" + "172.22.17.155" + ",1433; Initial Catalog="
                + "KRWMS" + "; Integrated Security=SSPI;";

            DbHelper dh = new DbHelper(connectionString);
            dh.throwError = true;
            Logger l = new Logger(Directory.GetCurrentDirectory() + @"\Logger");
            dh.SetLogger(l);

            string query = "select top 100 * from krwms..orders";
            DataSet ds = new DataSet();
            dh.CallQuery(query, ref ds);

            foreach (DataRow r in ds.Tables[0].Rows)
            {
                foreach (DataColumn c in ds.Tables[0].Columns)
                {
                    Console.Write(r[c] + " ");
                }
                Console.WriteLine();
            }

            //string query = "select wsdata from krarchive..wsoutbound_log(nolock) where seqno in ( '257018156', '257025373')";
            //DataSet ds = new DataSet();
            //dh.CallQuery(query, ref ds);

            //오더정보
            //주소 가져오기
            //주소 CJ직접 정제
            //되면 TLOG 아카이빙 확인
            //면 복구
            //0으로 리트리거
            //awaiting
            //9되면 찍어주고
            //돌면서 오더에 m_zip 확인

            //테스팅


        }

        // State object for reading client data asynchronously  
        public class StateObject
        {
            // Size of receive buffer.  
            public const int BufferSize = 1024;

            // Receive buffer.  
            public byte[] buffer = new byte[BufferSize];

            // Received data string.
            public StringBuilder sb = new StringBuilder();

            // Client socket.
            public Socket workSocket = null;
        }

        public class AsynchronousSocketListener
        {
            // Thread signal.  
            public static ManualResetEvent allDone = new ManualResetEvent(false);

            public AsynchronousSocketListener()
            {
            }

            public static void StartListening()
            {
                // Establish the local endpoint for the socket.  
                // The DNS name of the computer  
                // running the listener is "host.contoso.com".  
                IPHostEntry ipHostInfo = Dns.GetHostEntry(Dns.GetHostName());
                IPAddress ipAddress = ipHostInfo.AddressList[0];
                IPEndPoint localEndPoint = new IPEndPoint(ipAddress, 11000);

                // Create a TCP/IP socket.  
                Socket listener = new Socket(ipAddress.AddressFamily,
                    SocketType.Stream, ProtocolType.Tcp);

                // Bind the socket to the local endpoint and listen for incoming connections.  
                try
                {
                    listener.Bind(localEndPoint);
                    listener.Listen(100);

                    while (true)
                    {
                        // Set the event to nonsignaled state.  
                        allDone.Reset();

                        // Start an asynchronous socket to listen for connections.  
                        Console.WriteLine("Waiting for a connection...");
                        listener.BeginAccept(
                            new AsyncCallback(AcceptCallback),
                            listener);

                        // Wait until a connection is made before continuing.  
                        allDone.WaitOne();
                    }

                }
                catch (Exception e)
                {
                    Console.WriteLine(e.ToString());
                }

                Console.WriteLine("\nPress ENTER to continue...");
                Console.Read();

            }

            public static void AcceptCallback(IAsyncResult ar)
            {
                // Signal the main thread to continue.  
                allDone.Set();

                // Get the socket that handles the client request.  
                Socket listener = (Socket)ar.AsyncState;
                Socket handler = listener.EndAccept(ar);

                // Create the state object.  
                StateObject state = new StateObject();
                state.workSocket = handler;
                handler.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0,
                    new AsyncCallback(ReadCallback), state);
            }

            public static void ReadCallback(IAsyncResult ar)
            {
                String content = String.Empty;

                // Retrieve the state object and the handler socket  
                // from the asynchronous state object.  
                StateObject state = (StateObject)ar.AsyncState;
                Socket handler = state.workSocket;

                // Read data from the client socket.
                int bytesRead = handler.EndReceive(ar);

                if (bytesRead > 0)
                {
                    // There  might be more data, so store the data received so far.  
                    state.sb.Append(Encoding.ASCII.GetString(
                        state.buffer, 0, bytesRead));

                    // Check for end-of-file tag. If it is not there, read
                    // more data.  
                    content = state.sb.ToString();
                    if (content.IndexOf("<EOF>") > -1)
                    {
                        // All the data has been read from the
                        // client. Display it on the console.  
                        Console.WriteLine("Read {0} bytes from socket. \n Data : {1}",
                            content.Length, content);
                        // Echo the data back to the client.  
                        Thread.Sleep(100000);
                        Send(handler, content);
                    }
                    else
                    {
                        // Not all data received. Get more.  
                        handler.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0,
                        new AsyncCallback(ReadCallback), state);
                    }
                }
            }

            private static void Send(Socket handler, String data)
            {
                // Convert the string data to byte data using ASCII encoding.  
                byte[] byteData = Encoding.ASCII.GetBytes(data);

                // Begin sending the data to the remote device.  
                handler.BeginSend(byteData, 0, byteData.Length, 0,
                    new AsyncCallback(SendCallback), handler);
            }

            private static void SendCallback(IAsyncResult ar)
            {
                try
                {
                    // Retrieve the socket from the state object.  
                    Socket handler = (Socket)ar.AsyncState;

                    // Complete sending the data to the remote device.  
                    int bytesSent = handler.EndSend(ar);
                    Console.WriteLine("Sent {0} bytes to client.", bytesSent);

                    handler.Shutdown(SocketShutdown.Both);
                    handler.Close();

                }
                catch (Exception e)
                {
                    Console.WriteLine(e.ToString());
                }
            }
        }
    }
}